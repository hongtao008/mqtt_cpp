# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - master
pr:
  - '*'

pool:
  vmImage: 'windows-2022'

strategy:
  matrix:
    ExamplesTls:
      MQTT_USE_TLS: ON
      MQTT_USE_WS: OFF
      MQTT_USE_STR_CHECK: ON
      MQTT_TEST_1: OFF
      MQTT_TEST_2: OFF
      MQTT_TEST_3: OFF
      MQTT_TEST_4: OFF
      MQTT_TEST_5: OFF
      MQTT_TEST_6: OFF
      MQTT_TEST_7: OFF
      MQTT_BUILD_EXAMPLES: ON
    ExamplesWs:
      MQTT_USE_TLS: OFF
      MQTT_USE_WS: ON
      MQTT_USE_STR_CHECK: ON
      MQTT_TEST_1: OFF
      MQTT_TEST_2: OFF
      MQTT_TEST_3: OFF
      MQTT_TEST_4: OFF
      MQTT_TEST_5: OFF
      MQTT_TEST_6: OFF
      MQTT_TEST_7: OFF
      MQTT_BUILD_EXAMPLES: ON
    TestGroup1:
      MQTT_USE_TLS: ON
      MQTT_USE_WS: OFF
      MQTT_USE_STR_CHECK: OFF
      MQTT_TEST_1: ON
      MQTT_TEST_2: OFF
      MQTT_TEST_3: OFF
      MQTT_TEST_4: OFF
      MQTT_TEST_5: OFF
      MQTT_TEST_6: OFF
      MQTT_TEST_7: OFF
      MQTT_BUILD_EXAMPLES: OFF
    TestGroup2:
      MQTT_USE_TLS: OFF
      MQTT_USE_WS: ON
      MQTT_USE_STR_CHECK: ON
      MQTT_TEST_1: OFF
      MQTT_TEST_2: ON
      MQTT_TEST_3: OFF
      MQTT_TEST_4: OFF
      MQTT_TEST_5: OFF
      MQTT_TEST_6: OFF
      MQTT_TEST_7: OFF
      MQTT_BUILD_EXAMPLES: OFF
    TestGroup3:
      MQTT_USE_TLS: ON
      MQTT_USE_WS: OFF
      MQTT_USE_STR_CHECK: ON
      MQTT_TEST_1: OFF
      MQTT_TEST_2: OFF
      MQTT_TEST_3: ON
      MQTT_TEST_4: OFF
      MQTT_TEST_5: OFF
      MQTT_TEST_6: OFF
      MQTT_TEST_7: OFF
      MQTT_BUILD_EXAMPLES: OFF
    TestGroup4:
      MQTT_USE_TLS: OFF
      MQTT_USE_WS: ON
      MQTT_USE_STR_CHECK: ON
      MQTT_TEST_1: OFF
      MQTT_TEST_2: OFF
      MQTT_TEST_3: OFF
      MQTT_TEST_4: ON
      MQTT_TEST_5: OFF
      MQTT_TEST_6: OFF
      MQTT_TEST_7: OFF
      MQTT_BUILD_EXAMPLES: OFF
    TestGroup5:
      MQTT_USE_TLS: OFF
      MQTT_USE_WS: ON
      MQTT_USE_STR_CHECK: ON
      MQTT_TEST_1: OFF
      MQTT_TEST_2: OFF
      MQTT_TEST_3: OFF
      MQTT_TEST_4: OFF
      MQTT_TEST_5: ON
      MQTT_TEST_6: OFF
      MQTT_TEST_7: OFF
      MQTT_BUILD_EXAMPLES: OFF
    TestGroup6:
      MQTT_USE_TLS: ON
      MQTT_USE_WS: OFF
      MQTT_USE_STR_CHECK: ON
      MQTT_TEST_1: OFF
      MQTT_TEST_2: OFF
      MQTT_TEST_3: OFF
      MQTT_TEST_4: OFF
      MQTT_TEST_5: OFF
      MQTT_TEST_6: ON
      MQTT_TEST_7: OFF
      MQTT_BUILD_EXAMPLES: OFF
    TestGroup7:
      MQTT_USE_TLS: OFF
      MQTT_USE_WS: ON
      MQTT_USE_STR_CHECK: ON
      MQTT_TEST_1: OFF
      MQTT_TEST_2: OFF
      MQTT_TEST_3: OFF
      MQTT_TEST_4: OFF
      MQTT_TEST_5: OFF
      MQTT_TEST_6: OFF
      MQTT_TEST_7: ON
      MQTT_BUILD_EXAMPLES: OFF

steps:
- powershell: |
    choco install --confirm --limitoutput --no-progress openssl --version=3.1.1
  displayName: 'install openssl'

- powershell: |
    choco install --confirm --limitoutput --no-progress openssl --version=3.1.1
    choco install --confirm --limitoutput --no-progress 7zip
  displayName: 'Install dependencies'

- powershell: |
    $boostVersion = "1.88.0"
    $boostDirName = "boost_1_88_0"
    $boostArchive = "$env:TEMP\$boostDirName.7z"
    $boostUrl = "https://archives.boost.io/release/$boostVersion/source/$boostDirName.7z"
    $installPrefix = "C:\hostedtoolcache\windows\boost-src"

    Write-Host "Downloading boost via curl..."
    curl.exe -L -o $boostArchive $boostUrl

    Write-Host "Extracting boost..."
    & 7z x $boostArchive "-o$env:TEMP\$boostDirName" -y

    cd "$env:TEMP\$boostDirName\$boostDirName"
    .\bootstrap.bat
    .\b2 toolset=msvc link=static,shared install `
        -j2 `
        --prefix=$installPrefix `
        --with-container `
        --with-filesystem `
        --with-log `
        --with-program_options `
        --with-system `
        --with-test
  displayName: 'Build boost from source with curl'

- powershell: |
    git submodule update --init --recursive
    if (!$?) {
      return Write-Error "git submodule update --init --recursive failed"
    }
    mkdir build
    cd build
    $env:CL="/D_WIN32_WINNT#0x0601 /DBOOST_THREAD_VERSION#3 /DBOOST_ALLOW_DEPRECATED_HEADERS /DBOOST_ASIO_NO_DEPRECATED"
    $env:BOOST_ROOT="C:\hostedtoolcache\windows\Boost\1.88.0\x86_64"
    $env:PATH="$env:BOOST_ROOT\lib64-msvc-14.2;"+$env:PATH

    cmake -A x64 -G "Visual Studio 17 2022" -DMQTT_USE_TLS=$(MQTT_USE_TLS) -DMQTT_USE_WS=$(MQTT_USE_WS) -DMQTT_USE_STR_CHECK=$(MQTT_USE_STR_CHECK) -DMQTT_TEST_1=$(MQTT_TEST_1) -DMQTT_TEST_2=$(MQTT_TEST_2) -DMQTT_TEST_3=$(MQTT_TEST_3) -DMQTT_TEST_4=$(MQTT_TEST_4) -DMQTT_TEST_5=$(MQTT_TEST_5) -DMQTT_TEST_6=$(MQTT_TEST_6) -DMQTT_TEST_7=$(MQTT_TEST_7) -DMQTT_BUILD_EXAMPLES=$(MQTT_BUILD_EXAMPLES) ..
    if (!$?) {
      return Write-Error "cmake failed"
    }
    cmake --build . --config Release --verbose
    if (!$?) {
      return Write-Error "cmake --build failed"
    }
    cd test

    # If you want to debug a specific test file with logs, do as follows instead of execute ctest
    # Release\resend.exe --log_level=all
    ctest -VV -C Release

    if (!$?) {
      return Write-Error "ctest -VV failed"
    }
  displayName: 'cmake test'
